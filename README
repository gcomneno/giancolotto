## Giancolotto
Giancolotto è un\'applicazione Python per estrarre e analizzare dati delle estrazioni al gioco del lotto.

## Dipendenze
- Python 3.x
- Docker    [opzionale]
- MongoDB   [opzionale]

## Installazione
1. Clona il repository:
   git clone https://github.com/gcomneno/giancolotto.git
   cd giancolotto

2. Costruisci l\'immagine Docker        [opzionale]
    make build

3. Avvia i container:                   [opzionale]
    make up

4. Arresta e rimuove i container Docker [opzionale]
    make down

## Utilizzo con Docker
### Verifica che i container siano in esecuzione:
    docker-compose ps

### Esegui l'applicazione nel container
    make run
    ...
    docker-compose exec giancolotto python ./src/main.py
    ...

## Ambiente locale
cd /I/DATA/MyWorkspace/Progetti/giancolotto
winpty make run

## Configurazione
Modifica il file config.ini per personalizzare la configurazione dell\'applicazione.

## [Scraping] Il sito dal quale recuperare le estrazioni del Lotto è:
url=https://www.estrazionedellotto.it/ultime-estrazioni-lotto

# Imposta il Numero di estrazioni da recuperare
num_estr=1

# Imposta Ruota specifica (lascia vuoto per tutte le ruote)
# Bari Cagliari Firenze Genova Milano Napoli Palermo Roma Torino Venezia
ruota=

# [Filtering]
filtro=per numeri o cifre?
numeri=8,11
cifre=0,9

## Risorse Aggiuntive
E\' corredata da svariati script Python automatizzati dai relativi script di Shell che  utilizzano in maniera mirata le singole funzionalità in base allo specifico obiettivo:
- frequenze.py
- filotti.py
- imc.py
- repetita.py
- strategy.py

### Esempi di utilizzo dei vari script di Shell
./go.sh
    Esegue il programma in Python (main) in base alla configurazione data nel file config.ini

./cerca_su_tutte.sh "[U]" (oppure "[0]" se il valore di previsionale è false!)
    Visualizza l\'Ultima Estrazione per intero

./cerca_su_tutte.sh "[U]" | ./classifica.sh
    Visualizza una tabella delle presenze dei numeri usciti nell\'ultima estrazione, ordinato per presenza decrescente

./cerca_su_tutte.sh "[U]" | ./classifica.sh | .trova_mancanti.sh
    Visualizza i numeri che non sono usciti nell\'ultima estrazione

./cerca_su_tutte.sh "152|153|154|155|156" | ./classifica.sh | ./trova_mancanti.sh
    Restituisce i numeri che ancora non sono usciti nelle estrazioni 152,153,154,155 e 156

./cerca_su_tutte.sh "<2>|<3>"
    Ricerca il filtro impostato (numeri o cifre) in config.ini per sorte di ambo oppure di terno

./cerca_su_tutte.sh "<4>" | sort -k1
    Ricerca il filtro impostato (numeri o cifre) in config.ini per sorte di quaterna ed ordina il risultato per estrazione decrescente

./cerca_su_tutte.sh "[4]" | awk '{print $6, $7, $8, $9, $10}'
    Ricerca soltanto la fascia estrattiva 4 (quintultima estrazione partendo da 0) su tutte le ruote e visualizza solo i 5 numeri estratti

./cerca_su_tutte.sh "[4]|[6]"
    Ricerca sia la fascia estrattiva 4 che la 6 su tutte le ruote e visualizza tutte le informazioni

./cerca_su_tutte.sh "[4]" | awk '{print $6, $7, $8, $9, $10}' | tr ' ' ',' | tr ',' '\n' | sort -n | uniq | paste -sd ','
    Ricerca la fascia 4 su tutte le ruote e visualizza i numeri come un array univoco separato da virgola

./anni.sh 2023 | grep -E "<2>|<3>" | sort -k4,4r -k5,5r -k6,6r
    Ricerca il filtro impostato (numeri o cifre) in config.ini per sorte di ambo o terno del biennio 2023/2024 ed ordina il risultato per data decrescente (AA/MM/GG)

./anni.sh 2000 2024 | grep "<3>" | sort -k1,2
    Ricerca il filtro impostato (numeri o cifre) in config.ini per sorte di terno negli ultimi 25 anni ed ordina il risultato per numero di 
    estrazione crescente

./go.sh | awk '{num = substr($10, 2); if (num ~ /^[0-9]+$/) printf "%s, ", num}' | sed 's/, $//'
    Ti prende la colonna con il numero di cifre uscite (vale solo quando il filtro è impostato a 'cifre' ovviamente!) e te la
    scrive come fosse un array, su una sola riga e separati dalla virgola. Utile per darla in pasto a pcond.py !

./cerca_su_tutte.sh "n. " | awk '{num = substr($10, 2); if (num ~ /^[0-9]+$/) printf "%s, ", num}' | sed 's/, $//'
    Come sopra ma lo fa per l\'intero anno su tutte le ruote

./run_strategy.sh 0 31 2 2 | grep "Rapporto:" | awk '{print $1, $5}' | sort -k2,2nr -k1,1 | grep -v " 0"
    Verifica la tua strategia di gioco (in strategy.py) per tutti i valori di fascia nel database

./run_strategy.sh 0 31 2 2 | grep "Rapporto:" | awk '{ok += $5; ko += $8} END {if (ko > 0) {ratio = ok / ko} else {ratio = "Inf"}; print "Totale OK:", ok, "Totale KO:", ko, "Rapporto:", ratio}'
    Come sopra ma analizzando il rapporto da successi e fallimenti della strategia

### Script imc.py
Lo script `imc.py` permette di calcolare l'Insieme Minimo di Copertura di un dataset.
Far riferimeno al manuale utente: IMC.docx

### Script frequenze.py
Lo script `frequenze.py` permette di calcolare e analizzare la frequenza di numeri estratti in un dataset. Offre funzionalità avanzate come la visualizzazione dei dati in formato testuale o grafico e il supporto per filtri specifici.

#### Esempi di utilizzo:
- **Modalità testuale:**

```bash
python ./src/utils/frequenze.py --mode text
```
Output:
```plaintext
Presenze dei Numeri:
Numero 20: 54 presenze
Numero 24: 51 presenze
Numero 06: 49 presenze
...

Frequenza per Fascia di Decine:
 Fascia di Decine  Frequenza  Percentuale
       20-29         100        25.00%
       10-19          80        20.00%
...
```
- **Modalità grafica:**

```bash
python ./src/utils/frequenze.py --mode graphic
```
Visualizza due grafici:
1. Frequenza dei numeri.
2. Frequenza per fasce di decine.

- **Filtrare i risultati con `grep` (Linux):**
Filtrare i numeri nella fascia 20-29:
```bash
python ./src/utils/frequenze.py | grep -E 'Numero 2[0-9]:'
```
Output:
```plaintext
Numero 20: 54 presenze
Numero 24: 51 presenze
Numero 22: 48 presenze
...
```

## Licenza
Questo progetto è distribuito con la licenza MIT.
