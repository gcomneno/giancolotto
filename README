# Giancolotto
Giancolotto è un'applicazione Python per estrarre e analizzare i dati delle estrazioni del gioco del Lotto. 
Il progetto include script di supporto per facilitare le analisi avanzate, come la ricerca delle frequenze, l'identificazione di filotti, l'indice minimo di copertura ed altro ancora.

---

## Requisiti
- **Python 3.x**: Assicurati che sia installato e configurato nel tuo sistema.
- **Librerie Python**:
  - `requests`
  - `bs4` (BeautifulSoup)
  - `configparser`
  - `pymongo`
  - `colorama`

---

## Installazione
1. **Clona il repository**:
   ```bash
   git clone https://github.com/gcomneno/giancolotto.git
   cd giancolotto
   ```

2. **Installa le dipendenze**:
   Usa `pip` per installare le librerie richieste:
   ```bash
   pip install -r requirements.txt
   ```

3. **Configura l'applicazione**:
   Modifica il file `config.ini` per personalizzare i parametri come numero di estrazioni da analizzare, ruote specifiche, e filtri.

---

## Configurazione
### File `config.ini`
Il file di configurazione contiene le seguenti sezioni principali:

#### [Scraping]
- **`url`**: URL del sito per lo scraping delle estrazioni.
  ```ini
  url=https://www.estrazionedellotto.it/ultime-estrazioni-lotto
  ```
- **`num_estr`**: Numero di estrazioni da recuperare. Valore speciale `999` per l'ultima estrazione.
- **`ruota`**: Specifica una ruota (es. `Bari`, `Napoli`, ecc.) o lascia vuoto per analizzare tutte.

#### [Filtering]
- **`filtro`**: Modalità di analisi (`numeri` o `cifre`).
- **`numeri`**: Lista di numeri da evidenziare, separati da virgola.
- **`cifre`**: Lista di cifre da evidenziare, separati da virgola.

#### [Persistence]
- Parametri per salvare i dati in un database MongoDB:
  ```ini
  host=localhost
  porta=27017
  database=giancolotto
  ```

---

## Script di Shell
Giancolotto include diversi script Bash per automatizzare le analisi:

### **`get.sh`**
Esegue il programma principale Python basandosi sulla configurazione di `config.ini`:
```bash
./get.sh
```

### **`get_all.sh`**
Estrae i dati da un intervallo di anni specificato:
```bash
./get_all.sh {anno_iniziale} {anno_finale}
```
- Esempio:
  ```bash
  ./get_all.sh 2020 2025
  ```

### **`cerca_su_tutte.sh`**
Cerca dati specifici in tutte le estrazioni:
```bash
./cerca_su_tutte.sh "<pattern>"
```
Esempio: visualizza i risultati dell'ultima estrazione:
```bash
./cerca_su_tutte.sh "[U]"
```

### **`classifica.sh`**
Calcola la frequenza dei numeri estratti in un determinato intervallo:
```bash
./cerca_su_tutte.sh "[U]" | ./classifica.sh
```

### **`trova_mancanti.sh`**
Identifica i numeri non estratti in un determinato intervallo:
```bash
./cerca_su_tutte.sh "[U]" | ./classifica.sh | ./trova_mancanti.sh
```

---

## Script Python principali

### **`frequenze.py`**
Analizza la frequenza dei numeri estratti:
```bash
python ./src/utils/frequenze.py --mode text
```

### **`imc.py`**
Calcola l'Insieme Minimo di Copertura di un dataset.

### **`strategy.py`**
Verifica strategie di gioco per il Lotto.

Esempio:
```bash
./run_strategy.sh 0 31 2 2
```

---

## Esempi di utilizzo combinato
### Ricerca e analisi
```bash
./get_all.sh 2023 | grep "<3>" | ./classifica.sh
```

### Frequenze con numeri mancanti
```bash
./cerca_su_tutte.sh "[U]" | ./classifica.sh | ./trova_mancanti.sh
```

---

## TODO list
Chi fosse interessato può segnalare bug o richiedere nuove funzionalità aggiornando il file `TODO.md`.

---

## Licenza
Questo progetto è distribuito con la licenza MIT. Sentiti libero di contribuire!
```
